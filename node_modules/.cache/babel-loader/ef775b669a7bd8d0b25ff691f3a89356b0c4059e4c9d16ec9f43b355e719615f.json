{"ast":null,"code":"/*!\r\n * Masonry layout mode\r\n * sub-classes Masonry\r\n * https://masonry.desandro.com\r\n */\n\n(function (window, factory) {\n  // universal module definition\n  /* jshint strict: false */ /*globals define, module, require */\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['../layout-mode', 'masonry-layout/masonry'], factory);\n  } else if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('../layout-mode'), require('masonry-layout'));\n  } else {\n    // browser global\n    factory(window.Isotope.LayoutMode, window.Masonry);\n  }\n})(window, function factory(LayoutMode, Masonry) {\n  'use strict';\n\n  // -------------------------- masonryDefinition -------------------------- //\n\n  // create an Outlayer layout class\n  var MasonryMode = LayoutMode.create('masonry');\n  var proto = MasonryMode.prototype;\n  var keepModeMethods = {\n    _getElementOffset: true,\n    layout: true,\n    _getMeasurement: true\n  };\n\n  // inherit Masonry prototype\n  for (var method in Masonry.prototype) {\n    // do not inherit mode methods\n    if (!keepModeMethods[method]) {\n      proto[method] = Masonry.prototype[method];\n    }\n  }\n  var measureColumns = proto.measureColumns;\n  proto.measureColumns = function () {\n    // set items, used if measuring first item\n    this.items = this.isotope.filteredItems;\n    measureColumns.call(this);\n  };\n\n  // point to mode options for fitWidth\n  var _getOption = proto._getOption;\n  proto._getOption = function (option) {\n    if (option == 'fitWidth') {\n      return this.options.isFitWidth !== undefined ? this.options.isFitWidth : this.options.fitWidth;\n    }\n    return _getOption.apply(this.isotope, arguments);\n  };\n  return MasonryMode;\n});","map":{"version":3,"names":["window","factory","define","amd","module","exports","require","Isotope","LayoutMode","Masonry","MasonryMode","create","proto","prototype","keepModeMethods","_getElementOffset","layout","_getMeasurement","method","measureColumns","items","isotope","filteredItems","call","_getOption","option","options","isFitWidth","undefined","fitWidth","apply","arguments"],"sources":["C:/laragon/www/codes/porto-2/node_modules/isotope-layout/js/layout-modes/masonry.js"],"sourcesContent":["/*!\r\n * Masonry layout mode\r\n * sub-classes Masonry\r\n * https://masonry.desandro.com\r\n */\r\n\r\n( function( window, factory ) {\r\n  // universal module definition\r\n  /* jshint strict: false */ /*globals define, module, require */\r\n  if ( typeof define == 'function' && define.amd ) {\r\n    // AMD\r\n    define( [\r\n        '../layout-mode',\r\n        'masonry-layout/masonry'\r\n      ],\r\n      factory );\r\n  } else if ( typeof module == 'object' && module.exports ) {\r\n    // CommonJS\r\n    module.exports = factory(\r\n      require('../layout-mode'),\r\n      require('masonry-layout')\r\n    );\r\n  } else {\r\n    // browser global\r\n    factory(\r\n      window.Isotope.LayoutMode,\r\n      window.Masonry\r\n    );\r\n  }\r\n\r\n}( window, function factory( LayoutMode, Masonry ) {\r\n'use strict';\r\n\r\n// -------------------------- masonryDefinition -------------------------- //\r\n\r\n  // create an Outlayer layout class\r\n  var MasonryMode = LayoutMode.create('masonry');\r\n\r\n  var proto = MasonryMode.prototype;\r\n\r\n  var keepModeMethods = {\r\n    _getElementOffset: true,\r\n    layout: true,\r\n    _getMeasurement: true\r\n  };\r\n\r\n  // inherit Masonry prototype\r\n  for ( var method in Masonry.prototype ) {\r\n    // do not inherit mode methods\r\n    if ( !keepModeMethods[ method ] ) {\r\n      proto[ method ] = Masonry.prototype[ method ];\r\n    }\r\n  }\r\n\r\n  var measureColumns = proto.measureColumns;\r\n  proto.measureColumns = function() {\r\n    // set items, used if measuring first item\r\n    this.items = this.isotope.filteredItems;\r\n    measureColumns.call( this );\r\n  };\r\n\r\n  // point to mode options for fitWidth\r\n  var _getOption = proto._getOption;\r\n  proto._getOption = function( option ) {\r\n    if ( option == 'fitWidth' ) {\r\n      return this.options.isFitWidth !== undefined ?\r\n        this.options.isFitWidth : this.options.fitWidth;\r\n    }\r\n    return _getOption.apply( this.isotope, arguments );\r\n  };\r\n\r\n  return MasonryMode;\r\n\r\n}));\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEE,WAAUA,MAAM,EAAEC,OAAO,EAAG;EAC5B;EACA,2BAA2B;EAC3B,IAAK,OAAOC,MAAM,IAAI,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAG;IAC/C;IACAD,MAAM,CAAE,CACJ,gBAAgB,EAChB,wBAAwB,CACzB,EACDD,OAAQ,CAAC;EACb,CAAC,MAAM,IAAK,OAAOG,MAAM,IAAI,QAAQ,IAAIA,MAAM,CAACC,OAAO,EAAG;IACxD;IACAD,MAAM,CAACC,OAAO,GAAGJ,OAAO,CACtBK,OAAO,CAAC,gBAAgB,CAAC,EACzBA,OAAO,CAAC,gBAAgB,CAC1B,CAAC;EACH,CAAC,MAAM;IACL;IACAL,OAAO,CACLD,MAAM,CAACO,OAAO,CAACC,UAAU,EACzBR,MAAM,CAACS,OACT,CAAC;EACH;AAEF,CAAC,EAAET,MAAM,EAAE,SAASC,OAAOA,CAAEO,UAAU,EAAEC,OAAO,EAAG;EACnD,YAAY;;EAEZ;;EAEE;EACA,IAAIC,WAAW,GAAGF,UAAU,CAACG,MAAM,CAAC,SAAS,CAAC;EAE9C,IAAIC,KAAK,GAAGF,WAAW,CAACG,SAAS;EAEjC,IAAIC,eAAe,GAAG;IACpBC,iBAAiB,EAAE,IAAI;IACvBC,MAAM,EAAE,IAAI;IACZC,eAAe,EAAE;EACnB,CAAC;;EAED;EACA,KAAM,IAAIC,MAAM,IAAIT,OAAO,CAACI,SAAS,EAAG;IACtC;IACA,IAAK,CAACC,eAAe,CAAEI,MAAM,CAAE,EAAG;MAChCN,KAAK,CAAEM,MAAM,CAAE,GAAGT,OAAO,CAACI,SAAS,CAAEK,MAAM,CAAE;IAC/C;EACF;EAEA,IAAIC,cAAc,GAAGP,KAAK,CAACO,cAAc;EACzCP,KAAK,CAACO,cAAc,GAAG,YAAW;IAChC;IACA,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,OAAO,CAACC,aAAa;IACvCH,cAAc,CAACI,IAAI,CAAE,IAAK,CAAC;EAC7B,CAAC;;EAED;EACA,IAAIC,UAAU,GAAGZ,KAAK,CAACY,UAAU;EACjCZ,KAAK,CAACY,UAAU,GAAG,UAAUC,MAAM,EAAG;IACpC,IAAKA,MAAM,IAAI,UAAU,EAAG;MAC1B,OAAO,IAAI,CAACC,OAAO,CAACC,UAAU,KAAKC,SAAS,GAC1C,IAAI,CAACF,OAAO,CAACC,UAAU,GAAG,IAAI,CAACD,OAAO,CAACG,QAAQ;IACnD;IACA,OAAOL,UAAU,CAACM,KAAK,CAAE,IAAI,CAACT,OAAO,EAAEU,SAAU,CAAC;EACpD,CAAC;EAED,OAAOrB,WAAW;AAEpB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}